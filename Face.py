# -*- coding: utf-8 -*-
"""Untitled0.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Zg35wrQpBekzG1N_uqvEL4K_iZiWOtXD
"""

from matplotlib import pyplot
from PIL import Image
from numpy import asarray
from scipy.spatial.distance import cosine
from mtcnn.mtcnn import MTCNN
from keras_vggface.vggface import VGGFace
from keras_vggface.utils import preprocess_input

from matplotlib.patches import Rectangle
from matplotlib.patches import Circle

# extract a single face from a given photograph
def extract_face(filename, required_size=(224, 224)):
    pixels = pyplot.imread(filename)
    detector = MTCNN()
    results = detector.detect_faces(pixels)
    x1, y1, width, height = results[0]['box']
    x2, y2 = x1 + width, y1 + height
    face = pixels[y1:y2, x1:x2]
    image = Image.fromarray(face)
    image = image.resize(required_size)
    face_array = asarray(image)
    return face_array

# draw an image with detected objects
def draw_image_with_boxes(filename, result_list):
	data = pyplot.imread(filename)
	pyplot.imshow(data)
	ax = pyplot.gca()
	for result in result_list:
		x, y, width, height = result['box']
		rect = Rectangle((x, y), width, height, fill=False, color='red')
		ax.add_patch(rect)
		for value in result['keypoints'].items():
			dot = Circle(value, radius=2, color='red')
			ax.add_patch(dot)
	pyplot.show()



# extract faces and calculate face embeddings for a list of photo files
def get_embeddings(filenames):
    faces = [extract_face(f) for f in filenames]
    samples = asarray(faces, 'float32')
    samples = preprocess_input(samples, version=2)
    model = VGGFace(model='resnet50', include_top=False, input_shape=(224, 224, 3), pooling='avg')
    yhat = model.predict(samples)
    return yhat

# determine if a candidate face is a match for a known face
def is_match(known_embedding, candidate_embedding, thresh=0.5):
    score = cosine(known_embedding, candidate_embedding)
    if score <= thresh:
        print('>face is a Match (%.3f <= %.3f)' % (score, thresh))
    else:
        print('>face is NOT a Match (%.3f > %.3f)' % (score, thresh))

# filename = '..\\coderschool\\image\\4.jpg'
def output_drawFace(filename):
    pixels = pyplot.imread(filename)
    detector = MTCNN()
    faces = detector.detect_faces(pixels)
    draw_image_with_boxes(filename, faces)


# define filenames
img1 = '..\\coderschool\\image\\3.jpg'
img2 = '..\\coderschool\\image\\4.jpg'
def Output(img1, img2):
    filenames = [img1,img2 ]
    # get embeddings file filenames
    embeddings = get_embeddings(filenames)
    # define sharon stone
    # sharon_id = embeddings[0]
    # verify known photos of sharon
    is_match(embeddings[0], embeddings[1])

Output(img1, img2)